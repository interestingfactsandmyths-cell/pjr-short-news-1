<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PJR Short News</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            padding-bottom: 80px;
        }
        #notification {
            transition: opacity 0.5s, transform 0.5s;
        }
        input[type="file"] {
            display: none;
        }
        .custom-file-upload {
            border: 1px solid #4A5568;
            display: inline-block;
            padding: 6px 12px;
            cursor: pointer;
            background-color: #2D3748;
            border-radius: 0.5rem;
            color: #E2E8F0;
        }
        .custom-file-upload:hover {
            background-color: #4A5568;
        }
        .loader {
            border: 4px solid #4A5568;
            border-top: 4px solid #3B82F6;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            position: absolute;
            top: 50%;
            left: 50%;
            margin-left: -20px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .article-card {
            cursor: pointer;
        }
        .bottom-nav-link.active svg, .bottom-nav-link.active span {
            color: #3B82F6;
        }
        input:read-only {
            background-color: #4A5568;
        }
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-200">

    <!-- Main Container -->
    <div id="app-container" class="container mx-auto p-4 max-w-5xl">

        <!-- Top Navigation Bar -->
        <nav id="main-nav" class="bg-gray-800 rounded-lg shadow-md p-4 mb-8">
            <div class="flex justify-between items-center">
                <h1 class="text-2xl font-bold text-blue-500">PJR Short News</h1>
                <div class="flex items-center space-x-4">
                    <a href="#" id="top-admin-login-link" class="text-gray-400 hover:text-white">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                    </a>
                     <a href="#" id="top-admin-logout-link" class="hidden text-red-500 hover:text-red-400">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                        </svg>
                    </a>
                </div>
            </div>
        </nav>

        <!-- Main Content Area -->
        <main id="content-area" class="relative min-h-[300px]">
             <div id="loading-spinner" class="loader hidden"></div>
            <!-- Home Page -->
            <div id="home-page">
                <h2 class="text-3xl font-bold mb-6 text-center">Published Articles</h2>
                <div id="articles-container" class="space-y-8">
                    <div id="category-General" class="category-section hidden">
                        <h3 class="text-2xl font-semibold mb-4 border-b-2 border-blue-500 pb-2">General</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"></div>
                    </div>
                    <div id="category-Health" class="category-section hidden">
                        <h3 class="text-2xl font-semibold mb-4 border-b-2 border-green-500 pb-2">Health</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"></div>
                    </div>
                    <div id="category-Entertainment" class="category-section hidden">
                        <h3 class="text-2xl font-semibold mb-4 border-b-2 border-purple-500 pb-2">Entertainment</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"></div>
                    </div>
                    <div id="category-Sports" class="category-section hidden">
                        <h3 class="text-2xl font-semibold mb-4 border-b-2 border-red-500 pb-2">Sports</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"></div>
                    </div>
                    <div id="category-Travel" class="category-section hidden">
                        <h3 class="text-2xl font-semibold mb-4 border-b-2 border-yellow-500 pb-2">Travel</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"></div>
                    </div>
                    <div id="no-articles-message" class="text-center text-gray-500 mt-10">
                        <p>No articles have been published yet. Check back later!</p>
                    </div>
                </div>
            </div>
            
            <!-- Full Article Page -->
            <div id="full-article-page" class="hidden bg-gray-800 p-8 rounded-lg shadow-lg">
                <button id="back-to-home" class="mb-6 bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 transition duration-300">&larr; Back to Home</button>
                <h2 id="full-article-title" class="text-4xl font-bold mb-4 text-white"></h2>
                <div id="full-article-images" class="mb-6"></div>
                <p id="full-article-content" class="text-lg text-gray-300 leading-relaxed whitespace-pre-wrap"></p>
                <div id="reward-section" class="mt-8 p-4 bg-gray-700 rounded-lg text-center">
                    <p id="timer-text" class="text-lg mb-2">Read for <span id="timer-countdown">60</span> seconds to claim your reward!</p>
                    <button id="claim-reward-btn" class="bg-green-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-green-700 transition duration-300" disabled>Claim 10 Points</button>
                </div>
            </div>
            
            <!-- Wallet Page -->
            <div id="wallet-page" class="hidden">
                 <h2 class="text-3xl font-bold mb-6 text-center">My Wallet</h2>
                 <div class="bg-gray-800 p-8 rounded-lg shadow-lg max-w-lg mx-auto text-center">
                    <p class="text-lg text-gray-400 mb-2">Total Points Balance</p>
                    <p id="wallet-points" class="text-6xl font-bold text-yellow-400">0</p>
                    <div class="mt-8">
                        <button id="withdrawal-btn" class="bg-blue-600 text-white font-bold py-3 px-8 rounded-lg hover:bg-blue-700 transition duration-300 w-full" disabled>Request Withdrawal</button>
                        <p id="withdrawal-message" class="text-gray-500 mt-2 text-sm">You need at least 500 points to make a withdrawal request.</p>
                    </div>
                    <div class="mt-8 text-left border-t border-gray-700 pt-6">
                        <h3 class="text-xl font-semibold mb-4 text-white">How to Withdraw:</h3>
                        <ul class="list-disc list-inside space-y-2 text-gray-400">
                            <li>You need a minimum of <strong>500 points</strong> to request a withdrawal.</li>
                            <li>Click the "Request Withdrawal" button.</li>
                            <li>An email will be prepared for you to send to <a href="mailto:gyanganga2025@gmail.com" class="text-blue-400 underline">gyanganga2025@gmail.com</a>.</li>
                            <li>Ensure your Name & PhonePe Number are correct in the Account section.</li>
                            <li>You can only make one withdrawal request every 24 hours.</li>
                        </ul>
                    </div>
                 </div>
            </div>

            <!-- User Account Page -->
            <div id="account-page" class="hidden">
                 <h2 class="text-3xl font-bold mb-6 text-center">My Account</h2>
                 <div class="bg-gray-800 p-8 rounded-lg shadow-lg max-w-lg mx-auto">
                    <form id="account-form">
                        <div class="mb-4">
                            <label for="user-name" class="block text-gray-300 font-medium mb-2">Name</label>
                            <input type="text" id="user-name" class="w-full px-4 py-2 border border-gray-600 bg-gray-700 text-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" readonly>
                        </div>
                        <div class="mb-6">
                            <label for="user-phone" class="block text-gray-300 font-medium mb-2">PhonePe Number</label>
                            <input type="tel" id="user-phone" class="w-full px-4 py-2 border border-gray-600 bg-gray-700 text-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" readonly>
                        </div>
                        <div class="flex justify-center space-x-4">
                            <button type="button" id="edit-details-btn" class="bg-gray-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-gray-700 transition duration-300">Edit Details</button>
                            <button type="submit" id="save-details-btn" class="hidden bg-blue-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-blue-700 transition duration-300">Save Details</button>
                        </div>
                    </form>
                 </div>
            </div>
            
            <!-- Admin Login Page -->
            <div id="admin-login-page" class="hidden">
                <div class="bg-gray-800 p-8 rounded-lg shadow-lg max-w-lg mx-auto">
                    <h2 class="text-3xl font-bold mb-6 text-center">Admin Login</h2>
                    <form id="admin-login-form">
                        <div class="mb-4">
                            <label for="admin-email" class="block text-gray-300 font-medium mb-2">Email</label>
                            <input type="email" id="admin-email" class="w-full px-4 py-2 border border-gray-600 bg-gray-700 text-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                        </div>
                        <div class="mb-4">
                            <label for="admin-password" class="block text-gray-300 font-medium mb-2">Password</label>
                            <input type="password" id="admin-password" class="w-full px-4 py-2 border border-gray-600 bg-gray-700 text-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                        </div>
                        <div class="mb-6">
                            <label for="admin-secret-code" class="block text-gray-300 font-medium mb-2">Secret Code</label>
                            <input type="password" id="admin-secret-code" class="w-full px-4 py-2 border border-gray-600 bg-gray-700 text-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                        </div>
                        <div class="text-center">
                            <button type="submit" class="bg-blue-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-blue-700 transition duration-300 w-full">Login</button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Admin Article Writing Page -->
            <div id="admin-page" class="hidden">
                <h2 class="text-3xl font-bold mb-6 text-center">Admin Panel</h2>
                <div class="bg-gray-800 p-8 rounded-lg shadow-lg max-w-2xl mx-auto">
                    <h3 class="text-2xl font-semibold mb-6 text-white">Write a New Article</h3>
                    <form id="article-form">
                        <div class="mb-4">
                            <label for="article-title" class="block text-gray-300 font-medium mb-2">Title</label>
                            <input type="text" id="article-title" class="w-full px-4 py-2 border border-gray-600 bg-gray-700 text-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                        </div>
                        <div class="mb-4">
                            <label for="article-category" class="block text-gray-300 font-medium mb-2">Category</label>
                            <select id="article-category" class="w-full px-4 py-2 border border-gray-600 bg-gray-700 text-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                                <option value="General">General</option>
                                <option value="Health">Health</option>
                                <option value="Entertainment">Entertainment</option>
                                <option value="Sports">Sports</option>
                                <option value="Travel">Travel</option>
                            </select>
                        </div>
                        <div class="mb-4">
                            <label class="block text-gray-300 font-medium mb-2">Upload Images (up to 3)</label>
                            <div class="grid grid-cols-3 gap-4">
                                <div>
                                    <label for="article-image-1" class="custom-file-upload">Choose Image 1</label>
                                    <input type="file" id="article-image-1" accept="image/*">
                                    <img id="image-preview-1" class="hidden mt-2 w-full h-24 object-cover rounded-lg">
                                </div>
                                <div>
                                    <label for="article-image-2" class="custom-file-upload">Choose Image 2</label>
                                    <input type="file" id="article-image-2" accept="image/*">
                                    <img id="image-preview-2" class="hidden mt-2 w-full h-24 object-cover rounded-lg">
                                </div>
                                <div>
                                    <label for="article-image-3" class="custom-file-upload">Choose Image 3</label>
                                    <input type="file" id="article-image-3" accept="image/*">
                                    <img id="image-preview-3" class="hidden mt-2 w-full h-24 object-cover rounded-lg">
                                </div>
                            </div>
                        </div>
                        <div class="mb-6">
                            <label for="article-content" class="block text-gray-300 font-medium mb-2">Content</label>
                            <textarea id="article-content" rows="10" class="w-full px-4 py-2 border border-gray-600 bg-gray-700 text-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required></textarea>
                        </div>
                        <div class="text-center">
                            <button type="submit" class="bg-blue-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-blue-700 transition duration-300">Publish Article</button>
                        </div>
                    </form>
                </div>
            </div>
        </main>
    </div>

    <!-- Bottom Navigation Menu (Visible on all devices) -->
    <footer id="bottom-nav" class="fixed bottom-0 left-0 right-0 bg-gray-800 border-t border-gray-700 p-2">
        <div class="flex justify-around items-center max-w-5xl mx-auto">
            <a href="#" id="bottom-home-link" class="bottom-nav-link flex flex-col items-center text-gray-400 hover:text-blue-400 active">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                </svg>
                <span class="text-xs">Home</span>
            </a>
            <a href="#" id="bottom-articles-link" class="bottom-nav-link flex flex-col items-center text-gray-400 hover:text-blue-400">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 12h6M7 8h6" />
                </svg>
                <span class="text-xs">Articles</span>
            </a>
            <a href="#" id="bottom-wallet-link" class="bottom-nav-link flex flex-col items-center text-gray-400 hover:text-blue-400">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                </svg>
                <span class="text-xs">Wallet</span>
            </a>
            <a href="#" id="bottom-account-link" class="bottom-nav-link flex flex-col items-center text-gray-400 hover:text-blue-400">
                 <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                <span class="text-xs">Account</span>
            </a>
        </div>
    </footer>

    <!-- Notification -->
    <div id="notification" class="fixed bottom-24 md:bottom-5 right-5 bg-green-500 text-white py-3 px-6 rounded-lg shadow-lg opacity-0 transform translate-y-10">
        Article published successfully!
    </div>

    <!-- Firebase SDK -->
    <script type="module">
        const firebaseConfig = {
  apiKey: "AIzaSyBdw2lLI46jaM0QA3mq_EuBqOyn_b6vGQk",
  authDomain: "pjr--short-news-2025.firebaseapp.com",
  projectId: "pjr--short-news-2025",
  storageBucket: "pjr--short-news-2025.firebasestorage.app",
  messagingSenderId: "344560243063",
  appId: "1:344560243063:web:3a956d5e30ae863b59d172"
};

        const appId = firebaseConfig.projectId || 'pjr-short-news';

        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, query, serverTimestamp, doc, getDoc, setDoc, updateDoc, arrayUnion, increment } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        document.addEventListener('DOMContentLoaded', function() {
            const appContainer = document.getElementById('app-container');
            const mainNav = document.getElementById('main-nav');
            const contentArea = document.getElementById('content-area');
            const bottomNav = document.getElementById('bottom-nav');

            const homePage = document.getElementById('home-page');
            const adminPage = document.getElementById('admin-page');
            const fullArticlePage = document.getElementById('full-article-page');
            const accountPage = document.getElementById('account-page');
            const walletPage = document.getElementById('wallet-page');
            const adminLoginPage = document.getElementById('admin-login-page');
            
            const articleForm = document.getElementById('article-form');
            const accountForm = document.getElementById('account-form');
            const adminLoginForm = document.getElementById('admin-login-form');
            
            const noArticlesMessage = document.getElementById('no-articles-message');
            const loadingSpinner = document.getElementById('loading-spinner');
            
            const notification = document.getElementById('notification');
            const backToHomeBtn = document.getElementById('back-to-home');

            const topAdminLoginLink = document.getElementById('top-admin-login-link');
            const topAdminLogoutLink = document.getElementById('top-admin-logout-link');

            const bottomHomeLink = document.getElementById('bottom-home-link');
            const bottomArticlesLink = document.getElementById('bottom-articles-link');
            const bottomWalletLink = document.getElementById('bottom-wallet-link');
            const bottomAccountLink = document.getElementById('bottom-account-link');
            const allBottomLinks = document.querySelectorAll('.bottom-nav-link');

            const editDetailsBtn = document.getElementById('edit-details-btn');
            const saveDetailsBtn = document.getElementById('save-details-btn');
            const userNameInput = document.getElementById('user-name');
            const userPhoneInput = document.getElementById('user-phone');
            
            const claimRewardBtn = document.getElementById('claim-reward-btn');
            const timerText = document.getElementById('timer-text');
            const timerCountdown = document.getElementById('timer-countdown');
            const withdrawalBtn = document.getElementById('withdrawal-btn');
            const withdrawalMessage = document.getElementById('withdrawal-message');

            let isFirebaseConnected = false;
            let userId = null;
            let unsubscribeFromArticles = null;
            let articleTimerInterval = null;
            const WITHDRAWAL_LIMIT = 500;
            const ADMIN_SECRET_CODE = "Jumbo";
            
            function displayConfigError() {
                appContainer.innerHTML = `<div class="bg-red-900 border border-red-700 text-red-200 px-4 py-3 rounded-lg relative" role="alert"><strong class="font-bold">Configuration Error!</strong><span class="block sm:inline">Please replace the placeholder \`firebaseConfig\` in the script tag with your own Firebase project's configuration.</span></div>`;
            }

            if (firebaseConfig.apiKey === "YOUR_API_KEY") {
                 displayConfigError();
                return;
            }

            const app = initializeApp(firebaseConfig);
            const auth = getAuth(app);
            const db = getFirestore(app);

            function showNotification(message, isError = false) {
                notification.textContent = message;
                notification.className = `fixed bottom-24 md:bottom-5 right-5 text-white py-3 px-6 rounded-lg shadow-lg opacity-0 transform translate-y-10 ${isError ? 'bg-red-500' : 'bg-green-500'}`;
                notification.classList.remove('opacity-0', 'translate-y-10');
                setTimeout(() => {
                    notification.classList.add('opacity-0', 'translate-y-10');
                }, 5000);
            }

            function setActiveBottomNav(activeLink) {
                allBottomLinks.forEach(link => link.classList.remove('active'));
                if(activeLink) {
                    activeLink.classList.add('active');
                }
            }

            function showPage(pageToShow) {
                homePage.classList.add('hidden');
                adminPage.classList.add('hidden');
                fullArticlePage.classList.add('hidden');
                accountPage.classList.add('hidden');
                walletPage.classList.add('hidden');
                adminLoginPage.classList.add('hidden');
                pageToShow.classList.remove('hidden');
                
                if (pageToShow === homePage) setActiveBottomNav(bottomHomeLink);
                else if (pageToShow === accountPage) setActiveBottomNav(bottomAccountLink);
                else if (pageToShow === walletPage) setActiveBottomNav(bottomWalletLink);
                else setActiveBottomNav(null);
            }
            
            function clearArticles() {
                document.querySelectorAll('.category-section .grid').forEach(grid => grid.innerHTML = '');
                document.querySelectorAll('.category-section').forEach(section => section.classList.add('hidden'));
            }

            async function showFullArticle(article) {
                const { id, title, content, images } = article;
                
                document.getElementById('full-article-title').textContent = title;
                document.getElementById('full-article-content').textContent = content;
                
                const imagesContainer = document.getElementById('full-article-images');
                imagesContainer.innerHTML = '';

                if (images && images.length > 0) {
                    const coverImage = document.createElement('img');
                    coverImage.src = images[0];
                    coverImage.className = 'w-full h-80 object-cover rounded-lg mb-4';
                    coverImage.onerror = () => coverImage.style.display = 'none';
                    imagesContainer.appendChild(coverImage);

                    if (images.length > 1) {
                        const thumbnailsContainer = document.createElement('div');
                        thumbnailsContainer.className = 'grid grid-cols-2 gap-4';
                        images.slice(1).forEach(src => {
                            const thumb = document.createElement('img');
                            thumb.src = src;
                            thumb.className = 'w-full h-40 object-cover rounded-lg';
                            thumb.onerror = () => thumb.style.display = 'none';
                            thumbnailsContainer.appendChild(thumb);
                        });
                        imagesContainer.appendChild(thumbnailsContainer);
                    }
                }
                
                showPage(fullArticlePage);
                await startArticleTimer(id);
            }

            function displayArticleCard(article) {
                const { title, category, images } = article;
                const coverImage = images && images.length > 0 ? images[0] : 'https://placehold.co/600x400/374151/9CA3AF?text=PJR+News';

                const articleCard = document.createElement('div');
                articleCard.className = 'article-card bg-gray-800 rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 overflow-hidden';
                
                articleCard.innerHTML = `
                    <img src="${coverImage}" class="w-full h-40 object-cover" onerror="this.src='https://placehold.co/600x400/374151/9CA3AF?text=Image+Not+Found'">
                    <div class="p-4">
                        <h4 class="text-lg font-bold truncate text-white">${title}</h4>
                    </div>
                `;

                articleCard.addEventListener('click', () => showFullArticle(article));

                const categorySection = document.getElementById(`category-${category}`);
                const categoryGrid = categorySection.querySelector('.grid');

                if (categorySection && categoryGrid) {
                     if (categorySection.classList.contains('hidden')) {
                        categorySection.classList.remove('hidden');
                    }
                    categoryGrid.appendChild(articleCard);
                }
            }

            function listenForArticles() {
                if (!userId || !isFirebaseConnected) return;
                if (unsubscribeFromArticles) unsubscribeFromArticles();
                
                const articlesCollectionPath = `/artifacts/${appId}/public/data/articles`;
                const q = query(collection(db, articlesCollectionPath));

                unsubscribeFromArticles = onSnapshot(q, (querySnapshot) => {
                    clearArticles();
                    const articles = [];
                    querySnapshot.forEach((doc) => {
                        articles.push({ id: doc.id, ...doc.data() });
                    });
                    
                    if (articles.length === 0) {
                        noArticlesMessage.classList.remove('hidden');
                    } else {
                        noArticlesMessage.classList.add('hidden');
                        articles.sort((a, b) => (b.createdAt?.seconds ?? 0) - (a.createdAt?.seconds ?? 0));
                        articles.forEach(displayArticleCard);
                    }
                }, (error) => {
                    console.error("Error fetching articles: ", error);
                    if (error.code === 'permission-denied') {
                        displayFirestoreRulesError();
                    } else {
                        showNotification("Could not fetch articles.", true);
                    }
                });
            }

            async function saveArticle(articleData) {
                if (!isFirebaseConnected) {
                    showNotification("Cannot save: App is offline.", true);
                    return;
                }
                try {
                    const articlesCollectionPath = `/artifacts/${appId}/public/data/articles`;
                    await addDoc(collection(db, articlesCollectionPath), {
                        ...articleData,
                        createdAt: serverTimestamp()
                    });
                    showNotification('Article published successfully!');
                } catch (error) {
                    console.error("Error adding document: ", error);
                    showNotification('Failed to publish article.', true);
                }
            }

            async function getUserProfile(uid) {
                if (!uid || !isFirebaseConnected) return null;
                const userDocRef = doc(db, `/artifacts/${appId}/users/${uid}/profile`, 'details');
                try {
                    const docSnap = await getDoc(userDocRef);
                    return docSnap.exists() ? docSnap.data() : { name: '', phone: '', points: 0, readArticles: [], lastWithdrawalRequest: null };
                } catch (error) {
                    console.error("Error getting user profile:", error);
                    return null;
                }
            }

            async function loadUserDetails() {
                if (!isFirebaseConnected) {
                    showNotification("App is offline. Please check connection and refresh.", true);
                    return;
                }
                const profile = await getUserProfile(userId);
                if (profile) {
                    userNameInput.value = profile.name || '';
                    userPhoneInput.value = profile.phone || '';
                }
            }
            
            async function loadWalletDetails() {
                 if (!isFirebaseConnected) {
                    showNotification("App is offline. Please check connection and refresh.", true);
                    return;
                }
                const profile = await getUserProfile(userId);
                if(profile) {
                    const points = profile.points || 0;
                    document.getElementById('wallet-points').textContent = points;

                    const lastRequest = profile.lastWithdrawalRequest;
                    if (lastRequest) {
                        const now = new Date();
                        const lastRequestDate = lastRequest.toDate();
                        const timeDiff = now.getTime() - lastRequestDate.getTime();
                        const hoursDiff = timeDiff / (1000 * 3600);

                        if (hoursDiff < 24) {
                            withdrawalBtn.disabled = true;
                            const hoursRemaining = (24 - hoursDiff).toFixed(1);
                            withdrawalMessage.textContent = `You can make another request in ${hoursRemaining} hours.`;
                            withdrawalMessage.classList.add('text-yellow-400');
                            withdrawalMessage.classList.remove('text-gray-500', 'text-green-400');
                            return;
                        }
                    }

                    if (points >= WITHDRAWAL_LIMIT) {
                        withdrawalBtn.disabled = false;
                        withdrawalMessage.textContent = 'You are eligible to make a withdrawal request.';
                        withdrawalMessage.classList.remove('text-gray-500', 'text-yellow-400');
                        withdrawalMessage.classList.add('text-green-400');
                    } else {
                        withdrawalBtn.disabled = true;
                        withdrawalMessage.textContent = `You need at least ${WITHDRAWAL_LIMIT} points to make a withdrawal request.`;
                        withdrawalMessage.classList.add('text-gray-500');
                        withdrawalMessage.classList.remove('text-green-400', 'text-yellow-400');
                    }
                }
            }

            async function startArticleTimer(articleId) {
                if (articleTimerInterval) clearInterval(articleTimerInterval);
                
                timerText.classList.remove('hidden');
                claimRewardBtn.classList.remove('hidden');
                claimRewardBtn.disabled = true;
                claimRewardBtn.textContent = 'Claim 10 Points';

                const profile = await getUserProfile(userId);
                if (profile && profile.readArticles && profile.readArticles.includes(articleId)) {
                    timerText.textContent = 'You have already claimed the reward for this article.';
                    claimRewardBtn.classList.add('hidden');
                    return;
                }

                let seconds = 60;
                timerCountdown.textContent = seconds;
                
                articleTimerInterval = setInterval(() => {
                    seconds--;
                    timerCountdown.textContent = seconds;
                    if (seconds <= 0) {
                        clearInterval(articleTimerInterval);
                        timerText.textContent = 'You can now claim your reward!';
                        claimRewardBtn.disabled = false;
                        claimRewardBtn.onclick = () => claimReward(articleId);
                    }
                }, 1000);
            }

            async function claimReward(articleId) {
                if (!userId || !isFirebaseConnected) {
                    showNotification("Cannot claim reward: App is offline.", true);
                    return;
                }
                claimRewardBtn.disabled = true;
                const userDocRef = doc(db, `/artifacts/${appId}/users/${userId}/profile`, 'details');
                try {
                    await updateDoc(userDocRef, {
                        points: increment(10),
                        readArticles: arrayUnion(articleId)
                    });
                    showNotification("Reward of 10 points claimed!");
                    timerText.textContent = 'Reward claimed successfully!';
                } catch (error) {
                    if (error.code === 'not-found') {
                        await setDoc(userDocRef, { points: 10, readArticles: [articleId] });
                        showNotification("Reward of 10 points claimed!");
                        timerText.textContent = 'Reward claimed successfully!';
                    } else {
                        console.error("Error claiming reward: ", error);
                        showNotification("Could not claim reward.", true);
                        claimRewardBtn.disabled = false;
                    }
                }
            }


            backToHomeBtn.addEventListener('click', (e) => {
                e.preventDefault();
                if (articleTimerInterval) clearInterval(articleTimerInterval);
                showPage(homePage);
            });

            function setupImagePreview(inputId, previewId) {
                const input = document.getElementById(inputId);
                const preview = document.getElementById(previewId);

                input.addEventListener('change', function() {
                    const file = this.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            preview.src = e.target.result;
                            preview.classList.remove('hidden');
                        }
                        reader.readAsDataURL(file);
                    }
                });
            }

            setupImagePreview('article-image-1', 'image-preview-1');
            setupImagePreview('article-image-2', 'image-preview-2');
            setupImagePreview('article-image-3', 'image-preview-3');
            
            function resetImagePreviews() {
                for (let i = 1; i <= 3; i++) {
                    document.getElementById(`image-preview-${i}`).src = '';
                    document.getElementById(`image-preview-${i}`).classList.add('hidden');
                }
            }

            articleForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                loadingSpinner.classList.remove('hidden');

                const newArticle = {
                    title: document.getElementById('article-title').value,
                    category: document.getElementById('article-category').value,
                    content: document.getElementById('article-content').value,
                    images: []
                };
                
                for (let i = 1; i <= 3; i++) {
                    const preview = document.getElementById(`image-preview-${i}`);
                    if (!preview.classList.contains('hidden') && preview.src) {
                        newArticle.images.push(preview.src);
                    }
                }

                await saveArticle(newArticle);
                
                articleForm.reset();
                resetImagePreviews();
                showPage(homePage);
                loadingSpinner.classList.add('hidden');
            });
            
            editDetailsBtn.addEventListener('click', () => {
                userNameInput.readOnly = false;
                userPhoneInput.readOnly = false;
                userNameInput.focus();
                editDetailsBtn.classList.add('hidden');
                saveDetailsBtn.classList.remove('hidden');
            });

            accountForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                if (!isFirebaseConnected) {
                    showNotification("Cannot save details: App is offline.", true);
                    return;
                }
                const name = userNameInput.value;
                const phone = userPhoneInput.value;
                
                if (!userId) return;
                const userDocRef = doc(db, `/artifacts/${appId}/users/${userId}/profile`, 'details');
                try {
                    await setDoc(userDocRef, { name, phone }, { merge: true });
                    showNotification("Details saved successfully!");
                    userNameInput.readOnly = true;
                    userPhoneInput.readOnly = true;
                    saveDetailsBtn.classList.add('hidden');
                    editDetailsBtn.classList.remove('hidden');
                } catch (error) {
                    console.error("Error saving details:", error);
                    showNotification("Failed to save details.", true);
                }
            });

            // --- Admin Auth Listeners ---
            topAdminLoginLink.addEventListener('click', (e) => {
                e.preventDefault();
                showPage(adminLoginPage);
            });

            topAdminLogoutLink.addEventListener('click', (e) => {
                e.preventDefault();
                signOut(auth).catch(error => console.error("Logout failed:", error));
            });
            
            adminLoginForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const email = document.getElementById('admin-email').value;
                const password = document.getElementById('admin-password').value;
                const secretCode = document.getElementById('admin-secret-code').value;

                if (secretCode !== ADMIN_SECRET_CODE) {
                    showNotification("Invalid Secret Code.", true);
                    return;
                }

                signInWithEmailAndPassword(auth, email, password)
                    .then((userCredential) => {
                        showNotification("Admin login successful!");
                        showPage(adminPage);
                    })
                    .catch((error) => {
                        showNotification(error.message, true);
                    });
            });


            // --- Bottom Nav Listeners ---
            bottomHomeLink.addEventListener('click', (e) => {
                e.preventDefault();
                showPage(homePage);
            });
             bottomArticlesLink.addEventListener('click', (e) => {
                e.preventDefault();
                showPage(homePage);
                setActiveBottomNav(bottomArticlesLink);
            });
            bottomWalletLink.addEventListener('click', (e) => {
                e.preventDefault();
                loadWalletDetails();
                showPage(walletPage);
            });
            bottomAccountLink.addEventListener('click', (e) => {
                e.preventDefault();
                loadUserDetails();
                showPage(accountPage);
            });
            
            withdrawalBtn.addEventListener('click', async () => {
                if (!isFirebaseConnected) {
                    showNotification("Cannot request withdrawal: App is offline.", true);
                    return;
                }
                
                const profile = await getUserProfile(userId);
                if (!profile.name || !profile.phone) {
                    showNotification("Please complete your Name and PhonePe Number in the Account section before requesting a withdrawal.", true);
                    return;
                }

                withdrawalBtn.disabled = true;
                const userDocRef = doc(db, `/artifacts/${appId}/users/${userId}/profile`, 'details');
                try {
                    await updateDoc(userDocRef, {
                        lastWithdrawalRequest: serverTimestamp()
                    });

                    const subject = "Withdrawal Request - PJR Short News";
                    const body = `Hello,\n\nPlease process my withdrawal request.\n\nUser Details:\nName: ${profile.name}\nPhonePe Number: ${profile.phone}\nPoints: ${profile.points}\nUserID: ${userId}\n\nThank you.`;
                    window.location.href = `mailto:gyanganga2025@gmail.com?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;

                    showNotification('Your email app is opening to send the request.');
                    loadWalletDetails(); // Refresh wallet to show updated timer
                } catch (error) {
                     console.error("Error updating withdrawal timestamp: ", error);
                     showNotification("Could not send request. Please try again.", true);
                     withdrawalBtn.disabled = false;
                }
            });
            
            async function initializeAppAndAuth() {
                onAuthStateChanged(auth, (user) => {
                    if (user && !user.isAnonymous) {
                        // Admin is logged in
                        userId = user.uid;
                        isFirebaseConnected = true;
                        topAdminLoginLink.classList.add('hidden');
                        topAdminLogoutLink.classList.remove('hidden');
                        listenForArticles();
                    } else if (user && user.isAnonymous) {
                        // Regular user is logged in
                        userId = user.uid;
                        isFirebaseConnected = true;
                        topAdminLoginLink.classList.remove('hidden');
                        topAdminLogoutLink.classList.add('hidden');
                        listenForArticles();
                    } else {
                        // No user
                        userId = null;
                        isFirebaseConnected = false;
                        if (unsubscribeFromArticles) unsubscribeFromArticles();
                        clearArticles();
                        noArticlesMessage.classList.remove('hidden');
                        signInAnonymously(auth).catch(handleAuthError);
                    }
                });

                try {
                    if (!auth.currentUser) {
                       await signInAnonymously(auth);
                    }
                } catch (error) {
                    handleAuthError(error);
                }
            }
            
            function handleAuthError(error){
                 isFirebaseConnected = false;
                console.error("Authentication failed:", error);
                loadingSpinner.classList.add('hidden');
                let errorMessage = "Could not connect to the database. Please check your Firebase configuration and internet connection.";
                
                if (error.code === 'auth/api-key-not-valid') {
                     errorMessage = `
                        <h2 class="text-2xl font-bold mb-4">Action Required: Correct Your Firebase Configuration</h2>
                        <p class="font-bold">The app cannot connect because the API Key in your configuration is not valid.</p>
                        <p class="mt-4"><strong>Please follow these exact steps to fix this:</strong></p>
                        <ol class="list-decimal list-inside mt-2 space-y-1">
                            <li>Go to the <a href="https://console.firebase.google.com/" target="_blank" class="text-blue-500 underline">Firebase Console</a>.</li>
                            <li>Select your project: <strong>${firebaseConfig.projectId}</strong>.</li>
                            <li>Click the <strong>Gear icon</strong> (Project settings) in the top-left corner.</li>
                            <li>In the 'General' tab, scroll down to the 'Your apps' section.</li>
                            <li>Find your web app and look for the <strong>firebaseConfig</strong> object.</li>
                            <li>Click the 'Copy' button to copy the entire configuration object.</li>
                            <li>Paste it into the script section of this application, replacing the existing \`firebaseConfig\` object.</li>
                        </ol>
                        <p class="mt-4">After you've done this, please refresh this page.</p>
                    `;
                } else if (error.code === 'auth/configuration-not-found' || error.code === 'auth/operation-not-allowed') {
                    errorMessage = `
                        <h2 class="text-2xl font-bold mb-4">Action Required: Enable Sign-In Method</h2>
                        <p class="font-bold">The app cannot connect because the required sign-in methods are not enabled in your Firebase project.</p>
                        <p class="mt-4"><strong>Please follow these exact steps to fix this:</strong></p>
                        <ol class="list-decimal list-inside mt-2 space-y-1">
                            <li>Go to the <a href="https://console.firebase.google.com/" target="_blank" class="text-blue-500 underline">Firebase Console</a>.</li>
                            <li>Select your project: <strong>${firebaseConfig.projectId}</strong>.</li>
                            <li>In the left menu, go to <strong>Build > Authentication</strong>.</li>
                            <li>Click the <strong>'Sign-in method'</strong> tab at the top.</li>
                            <li>Find <strong>'Anonymous'</strong> in the provider list and <strong>Enable</strong> it.</li>
                            <li>Find <strong>'Email/Password'</strong> in the provider list and <strong>Enable</strong> it.</li>
                        </ol>
                        <p class="mt-4">After you've done this, please refresh this page.</p>
                    `;
                }
                
                mainNav.classList.add('hidden');
                bottomNav.classList.add('hidden');
                contentArea.innerHTML = `
                    <div class="bg-gray-800 border-l-4 border-red-500 text-red-200 p-4" role="alert">
                        ${errorMessage}
                    </div>
                `;
            }
            
            function displayFirestoreRulesError() {
                mainNav.classList.add('hidden');
                bottomNav.classList.add('hidden');
                contentArea.innerHTML = `
                    <div class="bg-gray-800 border-l-4 border-red-500 text-red-200 p-4" role="alert">
                         <h2 class="text-2xl font-bold mb-4">Action Required: Update Firestore Security Rules</h2>
                        <p class="font-bold">The app cannot read articles because your database security rules are too restrictive.</p>
                        <p class="mt-4"><strong>Please follow these exact steps to fix this:</strong></p>
                        <ol class="list-decimal list-inside mt-2 space-y-1">
                            <li>Go to the <a href="https://console.firebase.google.com/" target="_blank" class="text-blue-500 underline">Firebase Console</a>.</li>
                            <li>Select your project: <strong>${firebaseConfig.projectId}</strong>.</li>
                            <li>In the left menu, go to <strong>Build > Firestore Database</strong>.</li>
                            <li>Click the <strong>'Rules'</strong> tab at the top.</li>
                            <li>Delete the existing rules and replace them with the code below.</li>
                        </ol>
                        <pre class="bg-gray-900 text-white p-4 rounded-md mt-4 overflow-x-auto"><code>rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /artifacts/{appId}/public/data/articles/{articleId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    match /artifacts/{appId}/users/{userId}/profile/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}</code></pre>
                        <p class="mt-4">After pasting the new rules, click <strong>'Publish'</strong> and then refresh this page.</p>
                    </div>
                `;
            }

            initializeAppAndAuth();
            showPage(homePage);
        });
    </script>
</body>
</html>
